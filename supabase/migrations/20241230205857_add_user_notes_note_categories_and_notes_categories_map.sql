drop policy "self ALL" on "public"."notes";

alter table "public"."notes" drop constraint "note_user_id_fkey";

alter table "public"."notes" drop constraint "note_pkey";

drop index if exists "public"."note_pkey";

create table "public"."note_categories" (
    "id" bigint generated by default as identity not null,
    "user_notes_id" uuid default gen_random_uuid(),
    "name" text not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "updated_at" timestamp with time zone default (now() AT TIME ZONE 'utc'::text)
);


alter table "public"."note_categories" enable row level security;

create table "public"."user_notes" (
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid default auth.uid()
);


alter table "public"."user_notes" enable row level security;

alter table "public"."notes" drop column "user_id";

alter table "public"."notes" add column "user_notes_id" uuid not null default gen_random_uuid();

CREATE UNIQUE INDEX note_categories_pkey ON public.note_categories USING btree (id);

CREATE UNIQUE INDEX user_notes_id_key ON public.user_notes USING btree (id);

CREATE UNIQUE INDEX user_notes_pkey ON public.user_notes USING btree (id);

alter table "public"."note_categories" add constraint "note_categories_pkey" PRIMARY KEY using index "note_categories_pkey";

alter table "public"."user_notes" add constraint "user_notes_pkey" PRIMARY KEY using index "user_notes_pkey";

alter table "public"."note_categories" add constraint "note_categories_user_notes_id_fkey" FOREIGN KEY (user_notes_id) REFERENCES user_notes(id) ON UPDATE RESTRICT ON DELETE SET DEFAULT not valid;

alter table "public"."note_categories" validate constraint "note_categories_user_notes_id_fkey";

alter table "public"."notes" add constraint "notes_user_notes_id_fkey" FOREIGN KEY (user_notes_id) REFERENCES users(id) ON UPDATE RESTRICT ON DELETE SET DEFAULT not valid;

alter table "public"."notes" validate constraint "notes_user_notes_id_fkey";

alter table "public"."user_notes" add constraint "user_notes_id_key" UNIQUE using index "user_notes_id_key";

alter table "public"."user_notes" add constraint "user_notes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE RESTRICT ON DELETE SET DEFAULT not valid;

alter table "public"."user_notes" validate constraint "user_notes_user_id_fkey";

grant delete on table "public"."note_categories" to "anon";

grant insert on table "public"."note_categories" to "anon";

grant references on table "public"."note_categories" to "anon";

grant select on table "public"."note_categories" to "anon";

grant trigger on table "public"."note_categories" to "anon";

grant truncate on table "public"."note_categories" to "anon";

grant update on table "public"."note_categories" to "anon";

grant delete on table "public"."note_categories" to "authenticated";

grant insert on table "public"."note_categories" to "authenticated";

grant references on table "public"."note_categories" to "authenticated";

grant select on table "public"."note_categories" to "authenticated";

grant trigger on table "public"."note_categories" to "authenticated";

grant truncate on table "public"."note_categories" to "authenticated";

grant update on table "public"."note_categories" to "authenticated";

grant delete on table "public"."note_categories" to "service_role";

grant insert on table "public"."note_categories" to "service_role";

grant references on table "public"."note_categories" to "service_role";

grant select on table "public"."note_categories" to "service_role";

grant trigger on table "public"."note_categories" to "service_role";

grant truncate on table "public"."note_categories" to "service_role";

grant update on table "public"."note_categories" to "service_role";

grant delete on table "public"."user_notes" to "anon";

grant insert on table "public"."user_notes" to "anon";

grant references on table "public"."user_notes" to "anon";

grant select on table "public"."user_notes" to "anon";

grant trigger on table "public"."user_notes" to "anon";

grant truncate on table "public"."user_notes" to "anon";

grant update on table "public"."user_notes" to "anon";

grant delete on table "public"."user_notes" to "authenticated";

grant insert on table "public"."user_notes" to "authenticated";

grant references on table "public"."user_notes" to "authenticated";

grant select on table "public"."user_notes" to "authenticated";

grant trigger on table "public"."user_notes" to "authenticated";

grant truncate on table "public"."user_notes" to "authenticated";

grant update on table "public"."user_notes" to "authenticated";

grant delete on table "public"."user_notes" to "service_role";

grant insert on table "public"."user_notes" to "service_role";

grant references on table "public"."user_notes" to "service_role";

grant select on table "public"."user_notes" to "service_role";

grant trigger on table "public"."user_notes" to "service_role";

grant truncate on table "public"."user_notes" to "service_role";

grant update on table "public"."user_notes" to "service_role";

create policy "self ALL"
on "public"."note_categories"
as permissive
for all
to authenticated
using ((EXISTS ( SELECT 1
   FROM user_notes
  WHERE ((user_notes.id = note_categories.user_notes_id) AND (user_notes.user_id = auth.uid())))))
with check ((EXISTS ( SELECT 1
   FROM user_notes
  WHERE ((user_notes.id = note_categories.user_notes_id) AND (user_notes.user_id = auth.uid())))));


create policy "self ALL"
on "public"."user_notes"
as permissive
for all
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "self ALL"
on "public"."notes"
as permissive
for all
to authenticated
using ((EXISTS ( SELECT 1
   FROM user_notes
  WHERE ((user_notes.id = notes.user_notes_id) AND (user_notes.user_id = auth.uid())))))
with check ((EXISTS ( SELECT 1
   FROM user_notes
  WHERE ((user_notes.id = notes.user_notes_id) AND (user_notes.user_id = auth.uid())))));



